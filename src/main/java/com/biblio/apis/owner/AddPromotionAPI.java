package com.biblio.apis.owner;

import com.biblio.dto.request.PromotionTemplateInsertRequest;
import com.biblio.dto.response.CustomerDetailResponse;
import com.biblio.dto.response.PromotionTemplateResponse;
import com.biblio.service.ICustomerService;
import com.biblio.service.IEmailService;
import com.biblio.service.IPromotionTemplateService;
import com.biblio.utils.HttpUtil;
import com.fasterxml.jackson.databind.ObjectMapper;

import javax.inject.Inject;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.Serial;
import java.text.DecimalFormat;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

@WebServlet(urlPatterns = {"/owner/promotion/add"})
public class AddPromotionAPI extends HttpServlet {
    @Serial
    private static final long serialVersionUID = 1L;

    @Inject
    private IPromotionTemplateService promotionTemplateService;

    @Inject
    private IEmailService emailService;

    @Inject
    private ICustomerService customerService;

    // T·∫°o m·ªôt thread pool v·ªõi ExecutorService
    private final ExecutorService executorService = Executors.newFixedThreadPool(5); // S·ªë lu·ªìng c√≥ th·ªÉ thay ƒë·ªïi t√πy v√†o nhu c·∫ßu

    public AddPromotionAPI() {
        super();
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        // Parse JSON request to PromotionInsertRequest model
        PromotionTemplateInsertRequest promotionTemplateInsertRequest = HttpUtil.of(request.getReader()).toModel(PromotionTemplateInsertRequest.class);

        Map<String, Object> map = new HashMap<>();
        ObjectMapper mapper = new ObjectMapper();

        try {
            Boolean isExitsCode = promotionTemplateService.isCodeExisted(promotionTemplateInsertRequest.getCode());
            if (isExitsCode) {
                map.put("isCodeExisted", true);
                map.put("message", "Code is existed");
            } else {
                PromotionTemplateResponse promotionTemplateResponse = promotionTemplateService.insertPromotionTemplate(promotionTemplateInsertRequest);
                map.put("isCodeExisted", false);
                map.put("message", "Promotion added successfully");

                // G·ª≠i email b·∫•t ƒë·ªìng b·ªô cho t·ª´ng kh√°ch h√†ng
                for (Long i = 1L; i <= 7; i++) {
                    final Long customerId = i; // L∆∞u gi√° tr·ªã customerId ƒë·ªÉ s·ª≠ d·ª•ng trong lambda expression
                    executorService.submit(() -> {
                        try {
                            CustomerDetailResponse customer = customerService.findById(customerId);
                            String emailContent = generatePromotionEmail(promotionTemplateResponse, customer, request);
                            String subject = "Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i: " + promotionTemplateResponse.getPromotions().iterator().next().getTitle();
                            emailService.sendEmailNoRePlay(customer.getEmail(), subject, emailContent);
                        } catch (Exception e) {
                            e.printStackTrace(); // Log l·ªói n·∫øu g·ª≠i email th·∫•t b·∫°i
                        }
                    });
                }
            }
        } catch (Exception e) {
            map.put("isCodeExisted", false); // Kh√¥ng ki·ªÉm tra m√£ n√™n v·∫´n l√† false
            map.put("message", "Failed to add promotion: " + e.getMessage());
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            e.printStackTrace();
        }

        // Send JSON response
        response.getWriter().write(mapper.writeValueAsString(map));
    }

    @Override
    public void destroy() {
        // ƒê·∫£m b·∫£o r·∫±ng thread pool s·∫Ω ƒë∆∞·ª£c d·ª´ng khi servlet b·ªã h·ªßy
        executorService.shutdown();
        super.destroy();
    }

    public String generatePromotionEmail(PromotionTemplateResponse promotionTemplateResponse, CustomerDetailResponse customer, HttpServletRequest request) {
        // ... M√£ sinh email (kh√¥ng thay ƒë·ªïi)
        StringBuilder emailContent = new StringBuilder();

        // ƒê·ªãnh d·∫°ng ng√†y gi·ªù m·ªõi
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm");

        try {
            // L·∫•y chu·ªói ng√†y hi·ªáu l·ª±c v√† ng√†y h·∫øt h·∫°n t·ª´ response
            String effectiveDateString = promotionTemplateResponse.getPromotions().iterator().next().getEffectiveDate();
            String expirationDateString = promotionTemplateResponse.getPromotions().iterator().next().getExpirationDate();

            // Chuy·ªÉn ƒë·ªïi chu·ªói th√†nh LocalDateTime
            LocalDateTime effectiveDate = LocalDateTime.parse(effectiveDateString, formatter);
            LocalDateTime expirationDate = LocalDateTime.parse(expirationDateString, formatter);

            // Chuy·ªÉn ƒë·ªïi th√†nh m√∫i gi·ªù Vi·ªát Nam
            effectiveDate = effectiveDate.atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toLocalDateTime();
            expirationDate = expirationDate.atZone(ZoneId.of("Asia/Ho_Chi_Minh")).toLocalDateTime();

            // ƒê·ªãnh d·∫°ng ng√†y gi·ªù th√†nh "dd-MM-yyyy HH:mm"
            String effectiveDateFormatted = effectiveDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));
            String expirationDateFormatted = expirationDate.format(DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm"));

            // ƒê·ªãnh d·∫°ng ti·ªÅn t·ªá (VND)
            DecimalFormat currencyFormat = new DecimalFormat("#,###");
            String discountLimit = currencyFormat.format(promotionTemplateResponse.getPromotions().iterator().next().getDiscountLimit()) + " VND";
            String minValueApplied = currencyFormat.format(promotionTemplateResponse.getPromotions().iterator().next().getMinValueApplied()) + " VND";

            emailContent.append("<html><body style=\"font-family: Arial, sans-serif; color: #333; line-height: 1.6;\">");
            emailContent.append("<div style=\"max-width: 600px; margin: auto; border: 1px solid #ddd; border-radius: 10px; padding: 20px; background-color: #f9f9f9;\">");

            // Header v·ªõi logo
            emailContent.append("<div style=\"text-align: center; margin-bottom: 20px;\">");
            emailContent.append("<img src=\"https://lh3.googleusercontent.com/d/1L2YtT3oH7TjTfyPhXVkx3XGJccTrfnQ1\" alt=\"Biblio Logo\" style=\"width: 150px; height: auto; margin-bottom: 10px;\"/>");
            emailContent.append("<h1 style=\"color: #d35400; margin: 0;\">üéâ Ch∆∞∆°ng Tr√¨nh Khuy·∫øn M√£i üéâ</h1>");
            emailContent.append("</div>");

            // N·ªôi dung ch√≠nh
            emailContent.append("<p>Ch√†o <strong>").append(customer.getFullName()).append("</strong>,</p>");
            emailContent.append("<p>Ch√∫ng t√¥i r·∫•t vui ƒë∆∞·ª£c gi·ªõi thi·ªáu ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i m·ªõi ƒë·∫∑c bi·ªát d√†nh cho b·∫°n!</p>");

            // Khuy·∫øn m√£i chi ti·∫øt
            emailContent.append("<div style=\"background-color: #fff3cd; padding: 15px; border-radius: 5px; border-left: 5px solid #ffc107;\">");
            emailContent.append("<p><b>Ti√™u ƒë·ªÅ:</b> ").append(promotionTemplateResponse.getPromotions().iterator().next().getTitle()).append("</p>");
            emailContent.append("<p><b>Lo·∫°i:</b> ").append(promotionTemplateResponse.getType()).append("</p>");
            emailContent.append("<p><b>M√£ khuy·∫øn m√£i:</b> <span style=\"color: #e74c3c; font-size: 18px;\">").append(promotionTemplateResponse.getCode()).append("</span></p>");
            emailContent.append("<p><b>M√¥ t·∫£:</b> ").append(promotionTemplateResponse.getPromotions().iterator().next().getDescription()).append("</p>");
            emailContent.append("<p><b>Th·ªùi gian hi·ªáu l·ª±c:</b> t·ª´ <span style=\"color: #27ae60;\">").append(effectiveDateFormatted)
                    .append("</span> ƒë·∫øn <span style=\"color: #e74c3c;\">").append(expirationDateFormatted).append("</span></p>");
            if (promotionTemplateResponse.getPromotions().iterator().next().getDiscountLimit() > 0) {
                emailContent.append("<p><b>Gi·∫£m t·ªëi ƒëa:</b> ").append(discountLimit).append("</p>");
            }
            if (promotionTemplateResponse.getPromotions().iterator().next().getMinValueApplied() > 0) {
                emailContent.append("<p><b>√Åp d·ª•ng cho ƒë∆°n h√†ng t·ª´:</b> ").append(minValueApplied).append("</p>");
            }
            emailContent.append("</div>");

            // L·ªùi k·∫øt
            emailContent.append("<p style=\"text-align: center; margin-top: 20px;\">H√£y nhanh tay s·ª≠ d·ª•ng m√£ khuy·∫øn m√£i n√†y tr∆∞·ªõc khi h·∫øt h·∫°n!</p>");
            emailContent.append("<hr style=\"border: none; border-top: 1px solid #ddd; margin: 20px 0;\">");
            emailContent.append("<p style=\"text-align: center;\">C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ lu√¥n tin t∆∞·ªüng v√† ƒë·ªìng h√†nh c√πng <strong>Biblio Bookshop</strong>.</p>");
            emailContent.append("<p style=\"text-align: center; font-weight: bold; color: #d35400;\">Biblio Bookshop</p>");

            emailContent.append("</div>");
            emailContent.append("</body></html>");

        } catch (Exception e) {
            e.printStackTrace();
            // X·ª≠ l√Ω l·ªói khi ng√†y gi·ªù kh√¥ng h·ª£p l·ªá
        }

        return emailContent.toString();
    }
}
